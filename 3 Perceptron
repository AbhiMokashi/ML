import numpy as np

def UnitStep(W,T):
    if(W>T):
        return 1
    return 0

def perceptron(input,output,w,a,th):
    epoch=30
    noinstances=input.shape[0]
    noinputs=input.shape[1]
    for j in range(0,epoch):
        flag=True
        print("Epoch: ",j+1)
        for i in range(noinstances):
            print("instance: ",i+1," inputs: ",input[i])
            x=input[i]
            T=output[i]
            ws=np.dot(w,x)
            pred=UnitStep(ws,th)
            error=T-pred
            if error==0:
                print("Outputs Matched No need to alter the weights")
            else:
                flag=True
                print("Outputs Mismatched need to change the weights")
                for k in range(noinputs):
                    w[k]=round(w[k]+(a+error+x[k]),1)
                print("Updated weights ",w)

            if not flag:
                print("Updated weights ", w)
                print("")
                break


inputs=np.array([[0,0],[0,1],[1,0],[1,1]])
inputNOT=np.array([[0],[1]])
outputOR=np.array([0,1,1,1])
outputAND=np.array([0,0,0,1])
outputNOT=np.array([1,0])


print("------------------------------------------------------------------------")
print("OR-GATE")
perceptron(inputs,outputOR,[-0.2,0.4],0.5,0)

print("------------------------------------------------------------------------")
print("AND-GATE")
perceptron(inputs,outputAND,[0.2,0.4],0.2,0)

print("------------------------------------------------------------------------")
print("NOT-GATE")
perceptron(inputNOT,outputNOT,[0.2],0.5,0)

